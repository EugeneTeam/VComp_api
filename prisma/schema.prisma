// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.1.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserState {
    ACTIVE
    INACTIVE
    BANNED
}

enum OrderStatus {
    // Awaiting clarification
    PROCESSED
    // Preparing for shipment
    FORMED
    // The order was canceled by the user
    CANCELED
    // The order has been sent
    ON_THE_WAY
    // Order completed
    COMPLETED
}

enum ArticleStatus {
    HIDDEN
    VISIBLE
}

enum BannerPositionX {
    LEFT
    MIDDLE
    RIHGT
}

enum BannerPositionY {
    TOP
    MIDDLE
    BOTTOM
}

model User {
    id Int @id @default(autoincrement())
    fullName String
    phone String
    city String
    email String @unique
    state UserState @default(INACTIVE)
    banReason String?
    activationToken String @unique
    authorizationToken String?
    resetPasswordToken String?
    googleId String? @unique
    favorits Favorite[]
    roleId LUserRole?
    createdAt DateTime @default(now())
    udpatedAt DateTime @default(now())
}

model Favorite {
    id Int @id @default(autoincrement())
    productId Int
    userId Int
    user User @relation(fields: [userId], references: [id])
}

model PaymentType {
    id Int @id @default(autoincrement())
    name String
    isActive Boolean @default(false)
    info String
    order Order?
}

model DeliveryService {
    id Int @id @default(autoincrement())
    name String
    isActive Boolean @default(false)
    info String
    order Order?
    lTypeService LTypeService[]
}

model Order {
    id Int @id @default(autoincrement())
    payment PaymentType @relation(fields: [paymentTypeId], references: [id])
    paymentTypeId Int
    delivery DeliveryService @relation(fields: [deliveryServiceId], references: [id])
    deliveryServiceId Int
    comment String?
    callback Boolean @default(false)
    status OrderStatus @default(PROCESSED)
    lProductList LProductList[]
}

model Product {
    id Int @id @default(autoincrement())
    name String @db.Text
    description String @db.Text
    price Float
    discountId Int?
    categoryId Int
    galleryId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    lProductList LProductList[]
    productViews ProductViews?
}

model Category {
    id Int @id @default(autoincrement())
    name String
    parentId Int?
    subCategory Category? @relation("ChildCategory", fields: [parentId], references: [id])
    child Category? @relation("ChildCategory")
}

model LTypeService {
    deliveryType DeliveryType @relation(fields: [deliveryTypeId], references: [id])
    deliveryTypeId Int
    deliveryService DeliveryService @relation(fields: [deliveryServiceId], references: [id])
    deliveryServiceId Int

    @@id([deliveryTypeId, deliveryServiceId])
}

model DeliveryType {
    id Int @id @default(autoincrement())
    name String
    isActive Boolean @default(false)
    info String
    lTypeService LTypeService[]
}

model LProductList {
    orderId Int
    order Order @relation(fields: [orderId], references: [id])
    quantity Int @default(1)
    productId Int
    product Product @relation(fields: [productId], references: [id])
    @@id([productId, orderId])
}

model ProductViews {
    id Int @id @default(autoincrement())
    productId Int
    product Product @relation(fields: [productId], references: [id])
    count Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Callback {
    id Int @id @default(autoincrement())
    phone String
    isProcessed Boolean @default(true)
}

model Article {
    id Int @id @default(autoincrement())
    articleCategoryId Int
    title String
    text String @db.Text
    image String
    status ArticleStatus @default(HIDDEN)
    source String?
}

model ArticleCategory {
    id Int @id @default(autoincrement())
    name String
    parentId Int
    subCategory ArticleCategory? @relation("ArticleChildCategory", fields: [parentId], references: [id])
    child ArticleCategory? @relation("ArticleChildCategory")
}

model Banner {
    id Int @id @default(autoincrement())
    page String
    title String
    positionX BannerPositionX
    positionY BannerPositionY
    html String @db.Text
    bannerImage BannerImage?
}

model BannerImage {
    id Int @id @default(autoincrement())
    bannerId Int
    banner Banner @relation(fields: [bannerId], references: [id])
    imageUrl String
    title String
    productUrl String?
}

model LUserRole {
    userId Int
    user User @relation(fields: [userId], references: [id])
    roleId Int
    role Role @relation(fields: [roleId], references: [id])
    @@id([userId, roleId])
}

model Role {
    id Int @id @default(autoincrement())
    name String
    lUserRole LUserRole[]
    lRolePermission LRolePermission[]
}

model LRolePermission {
    roleId Int
    role Role @relation(fields: [roleId], references: [id])
    permissionId Int
    permission Permission @relation(fields: [permissionId], references: [id])
    @@id([permissionId, roleId])
}

model Permission {
    id Int @id @default(autoincrement())
    name String
    lRolePermission LRolePermission[]
}
