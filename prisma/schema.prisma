// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.1.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
    ACTIVE
    INACTIVE
    BANNED
}

enum OrderStatus {
    // Awaiting clarification
    PROCESSED
    // Preparing for shipment
    FORMED
    // The order was canceled by the user
    CANCELED
    // The order has been sent
    ON_THE_WAY
    // Order completed
    COMPLETED
}

enum ArticleStatus {
    HIDDEN
    VISIBLE
}

enum BannerPositionX {
    LEFT
    MIDDLE
    RIHGT
}

enum BannerPositionY {
    TOP
    MIDDLE
    BOTTOM
}

enum CommentType {
    QUESTION
    COMMENT
}

enum DiscountType {
    VALUE
    PERCENT
}

model User {
    id Int @id @default(autoincrement())
    fullName String
    phone String
    city String
    email String @unique
    status UserStatus @default(INACTIVE)
    banReason String?
    activationToken String @unique
    authorizationToken String?
    resetPasswordToken String?
    googleId String? @unique
    createdAt DateTime @default(now())
    udpatedAt DateTime @updatedAt
    comment Comment[]
    favorits Favorite[]
    roleId LUserRole?
    order Order[]
}

model Favorite {
    id Int @id @default(autoincrement())
    productId Int
    product Product @relation(fields: [productId], references: [id])
    userId Int
    user User @relation(fields: [userId], references: [id])
    @@map("Favorites")
}

model PaymentType {
    id Int @id @default(autoincrement())
    name String @db.VarChar(100) @unique
    isActive Boolean @default(false)
    info String @db.VarChar(200)
    order Order?
}

model DeliveryService {
    id Int @id @default(autoincrement())
    name String @unique
    isActive Boolean @default(false)
    info String @db.VarChar(200)
    order Order?
    lTypeService LTypeService[]
}

model Order {
    id Int @id @default(autoincrement())
    payment PaymentType @relation(fields: [paymentTypeId], references: [id])
    paymentTypeId Int
    delivery DeliveryService @relation(fields: [deliveryServiceId], references: [id])
    deliveryServiceId Int
    comment String?
    callback Boolean @default(false)
    status OrderStatus @default(PROCESSED)
    userId Int
    user User @relation(fields: [userId], references: [id])
    lProductList LProductList[]
}

model Product {
    id Int @id @default(autoincrement())
    name String @db.VarChar(255) @unique
    description String @db.Text
    price Float
    discountId Int
    discount Discount @relation(fields: [discountId], references: [id])
    categoryId Int
    category Category @relation(fields: [categoryId], references: [id])
    galleryId Int
    gallery Gallery @relation(fields: [galleryId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    lProductList LProductList[]
    productViews ProductView?
    comment Comment[]
    lProductCharacteristic LProductCharacteristic[]
    favorite Favorite[]
}

model Category {
    id Int @id @default(autoincrement())
    name String @db.VarChar(100) @unique
    parentId Int?
    subCategory Category? @relation("SubCategory", fields: [parentId], references: [id])
    child Category[] @relation("SubCategory")
    characteristic Characteristic[]
    product Product?
}

model LTypeService {
    deliveryType DeliveryType @relation(fields: [deliveryTypeId], references: [id])
    deliveryTypeId Int
    deliveryService DeliveryService @relation(fields: [deliveryServiceId], references: [id])
    deliveryServiceId Int
    @@id([deliveryTypeId, deliveryServiceId])
}

model DeliveryType {
    id Int @id @default(autoincrement())
    name String @db.VarChar(100) @unique
    isActive Boolean @default(false)
    info String @db.VarChar(255)
    lTypeService LTypeService[]
}

model LProductList {
    orderId Int
    order Order @relation(fields: [orderId], references: [id])
    quantity Int @default(1)
    productId Int
    product Product @relation(fields: [productId], references: [id])
    @@id([productId, orderId])
}

model ProductView {
    id Int @id @default(autoincrement())
    productId Int
    product Product @relation(fields: [productId], references: [id])
    count Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Callback {
    id Int @id @default(autoincrement())
    phone String @db.VarChar(15) @unique
    isProcessed Boolean @default(true)
}

model Article {
    id Int @id @default(autoincrement())
    articleCategoryId Int
    title String @db.VarChar(100)
    text String @db.Text
    image String @db.VarChar(255)
    status ArticleStatus @default(HIDDEN)
    source String? @db.VarChar(255)
}

model ArticleCategory {
    id Int @id @default(autoincrement())
    name String @db.VarChar(100) @unique
    parentId Int
    subCategory ArticleCategory? @relation("ArticleChildCategory", fields: [parentId], references: [id])
    child ArticleCategory? @relation("ArticleChildCategory")
}

model Banner {
    id Int @id @default(autoincrement())
    page String @db.VarChar(100)
    title String @db.VarChar(100)
    positionX BannerPositionX
    positionY BannerPositionY
    html String @db.Text
    bannerImage BannerImage?
}

model BannerImage {
    id Int @id @default(autoincrement())
    bannerId Int
    banner Banner @relation(fields: [bannerId], references: [id])
    imageUrl String @db.VarChar(255)
    title String @db.VarChar(100)
    productUrl String?
}

model LUserRole {
    userId Int
    user User @relation(fields: [userId], references: [id])
    roleId Int
    role Role @relation(fields: [roleId], references: [id])
    @@id([userId, roleId])
}

model Role {
    id Int @id @default(autoincrement())
    name String @db.VarChar(100) @unique
    lUserRole LUserRole[]
    lRolePermission LRolePermission[]
}

model LRolePermission {
    roleId Int
    role Role @relation(fields: [roleId], references: [id])
    permissionId Int
    permission Permission @relation(fields: [permissionId], references: [id])
    @@id([permissionId, roleId])
}

model Permission {
    id Int @id @default(autoincrement())
    name String @db.VarChar(100) @unique
    lRolePermission LRolePermission[]
}

model Comment {
    id Int @id @default(autoincrement())
    type CommentType
    rating Int
    description String @db.Text
    flaws String @db.VarChar(255)
    dignity String @db.VarChar(255)
    userId Int
    user User @relation(fields: [userId], references: [id])
    productId Int
    product Product @relation(fields: [productId], references: [id])
    parentId Int
    subComment Comment @relation("SubComment", fields: [parentId], references: [id])
    child Comment[] @relation("SubComment")
}

model Discount {
    id Int @id @default(autoincrement())
    type DiscountType
    value Float
    expiredAt DateTime
    product Product?
}

model Gallery {
    id Int @id @default(autoincrement())
    name String @db.VarChar(100) @unique
    lImageGallery LImageGallery[]
    product Product?
}

model Characteristic {
    id Int @id @default(autoincrement())
    name String @db.VarChar(100) @unique
    value String @db.VarChar(255)
    url String @db.VarChar(255)
    categoryId Int
    category Category @relation(fields: [categoryId], references: [id])
    lProductCharacteristic LProductCharacteristic[]
}

model LProductCharacteristic {
    productId Int
    product Product @relation(fields: [productId], references: [id])
    characteristicId Int
    characteristic Characteristic @relation(fields: [characteristicId], references: [id])
    @@id([productId, characteristicId])
}

model Image {
    id Int @id @default(autoincrement())
    name String @unique
    url String @db.VarChar(255)
    order Int
    lImageGallery LImageGallery[]
}

model LImageGallery {
    imageId Int
    image Image @relation(fields: [imageId], references: [id])
    galleryId Int
    gallery Gallery @relation(fields: [galleryId], references: [id])
    @@id([imageId, galleryId])
}
